// <auto-generated />
using System;
using BookingWebApplication.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookingWebApplication.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookingWebApplication.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nchar(45)")
                        .HasColumnName("name")
                        .IsFixedLength();

                    b.Property<int>("UserName")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("admins");
                });

            modelBuilder.Entity("BookingWebApplication.Models.Cinema", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("I3D")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nchar(45)")
                        .HasColumnName("3D")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nchar(45)")
                        .HasColumnName("name")
                        .IsFixedLength();

                    b.Property<string>("Seats")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nchar(45)")
                        .HasColumnName("seats")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.ToTable("cinemas");
                });

            modelBuilder.Entity("BookingWebApplication.Models.ContentAdmin", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nchar(45)")
                        .HasColumnName("name")
                        .IsFixedLength();

                    b.Property<int>("UserName")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("content_admins");
                });

            modelBuilder.Entity("BookingWebApplication.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nchar(45)")
                        .HasColumnName("name")
                        .IsFixedLength();

                    b.Property<int>("UserName")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("BookingWebApplication.Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("movie_id");

                    b.Property<string>("MovieName")
                        .HasMaxLength(45)
                        .HasColumnType("nchar(45)")
                        .HasColumnName("movie_name")
                        .IsFixedLength();

                    b.Property<int>("ContentAdminId")
                        .HasColumnType("int");

                    b.Property<string>("MovieContent")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nchar(45)")
                        .HasColumnName("movie_description")
                        .IsFixedLength();

                    b.Property<string>("MovieDirector")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nchar(45)")
                        .HasColumnName("movie_director")
                        .IsFixedLength();

                    b.Property<int>("MovieLength")
                        .HasColumnType("int")
                        .HasColumnName("movie_length");

                    b.Property<string>("MovieSummary")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nchar(45)")
                        .HasColumnName("movie_summary")
                        .IsFixedLength();

                    b.Property<string>("MovieType")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nchar(45)")
                        .HasColumnName("movie_type")
                        .IsFixedLength();

                    b.HasKey("MovieId", "MovieName");

                    b.HasIndex("ContentAdminId");

                    b.ToTable("movies");
                });

            modelBuilder.Entity("BookingWebApplication.Models.Provoli", b =>
                {
                    b.Property<int>("MoviesId")
                        .HasColumnType("int")
                        .HasColumnName("MOVIES_ID");

                    b.Property<string>("MoviesName")
                        .HasMaxLength(45)
                        .HasColumnType("nchar(45)")
                        .HasColumnName("MOVIES_NAME");

                    b.Property<int?>("CinemasID")
                        .HasColumnType("int");

                    b.Property<int>("ContentAdminId")
                        .HasColumnType("int")
                        .HasColumnName("CONTENT_ADMIN_ID");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.HasKey("MoviesId", "MoviesName", "CinemasID", "ContentAdminId");

                    b.HasIndex("CinemasID");

                    b.HasIndex("ContentAdminId");

                    b.ToTable("provoles");
                });

            modelBuilder.Entity("BookingWebApplication.Models.Reservation", b =>
                {
                    b.Property<int>("ProvolesMoviesId")
                        .HasColumnType("int")
                        .HasColumnName("PROVOLES_MOVIES_ID");

                    b.Property<string>("ProvolesMoviesName")
                        .HasMaxLength(45)
                        .HasColumnType("nchar(45)")
                        .HasColumnName("PROVOLES_MOVIES_NAME");

                    b.Property<int>("ProvolesCinemasId")
                        .HasColumnType("int")
                        .HasColumnName("PROVOLES_CINEMAS_ID");

                    b.Property<int>("CustomersId")
                        .HasColumnType("int")
                        .HasColumnName("CUSTOMERS_ID");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int")
                        .HasColumnName("NUMBER_OF_SEATS");

                    b.Property<int>("ProvolesContentAdminId")
                        .HasColumnType("int");

                    b.HasKey("ProvolesMoviesId", "ProvolesMoviesName", "ProvolesCinemasId", "CustomersId");

                    b.HasIndex("CustomersId");

                    b.HasIndex("ProvolesMoviesId", "ProvolesMoviesName", "ProvolesCinemasId", "ProvolesContentAdminId");

                    b.ToTable("reservations");
                });

            modelBuilder.Entity("BookingWebApplication.Models.User", b =>
                {
                    b.Property<string>("UserName")
                        .HasMaxLength(32)
                        .HasColumnType("nchar(32)")
                        .HasColumnName("user_name")
                        .IsFixedLength();

                    b.Property<int>("AdminUserName")
                        .HasColumnType("int");

                    b.Property<int>("ContentAdminUserName")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_time");

                    b.Property<int>("CustomerUserName")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nchar(35)")
                        .HasColumnName("email")
                        .IsFixedLength();

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nchar(45)")
                        .HasColumnName("password")
                        .IsFixedLength();

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nchar(45)")
                        .HasColumnName("role")
                        .IsFixedLength();

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nchar(45)")
                        .HasColumnName("salt")
                        .IsFixedLength();

                    b.HasKey("UserName");

                    b.HasIndex("AdminUserName")
                        .IsUnique();

                    b.HasIndex("ContentAdminUserName")
                        .IsUnique();

                    b.HasIndex("CustomerUserName")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("BookingWebApplication.Models.Movie", b =>
                {
                    b.HasOne("BookingWebApplication.Models.ContentAdmin", "ContentAdmin")
                        .WithMany("Movies")
                        .HasForeignKey("ContentAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentAdmin");
                });

            modelBuilder.Entity("BookingWebApplication.Models.Provoli", b =>
                {
                    b.HasOne("BookingWebApplication.Models.Cinema", "Cinema")
                        .WithMany("Provoles")
                        .HasForeignKey("CinemasID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingWebApplication.Models.ContentAdmin", "ContentAdmin")
                        .WithMany("Provoles")
                        .HasForeignKey("ContentAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingWebApplication.Models.Movie", "Movie")
                        .WithMany("Provoles")
                        .HasForeignKey("MoviesId", "MoviesName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cinema");

                    b.Navigation("ContentAdmin");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("BookingWebApplication.Models.Reservation", b =>
                {
                    b.HasOne("BookingWebApplication.Models.Customer", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingWebApplication.Models.Provoli", "Provoli")
                        .WithMany("Reservations")
                        .HasForeignKey("ProvolesMoviesId", "ProvolesMoviesName", "ProvolesCinemasId", "ProvolesContentAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Provoli");
                });

            modelBuilder.Entity("BookingWebApplication.Models.User", b =>
                {
                    b.HasOne("BookingWebApplication.Models.Admin", "Admin")
                        .WithOne("User")
                        .HasForeignKey("BookingWebApplication.Models.User", "AdminUserName")
                        .HasPrincipalKey("BookingWebApplication.Models.Admin", "UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingWebApplication.Models.ContentAdmin", "ContentAdmin")
                        .WithOne("User")
                        .HasForeignKey("BookingWebApplication.Models.User", "ContentAdminUserName")
                        .HasPrincipalKey("BookingWebApplication.Models.ContentAdmin", "UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingWebApplication.Models.Customer", "Customer")
                        .WithOne("User")
                        .HasForeignKey("BookingWebApplication.Models.User", "CustomerUserName")
                        .HasPrincipalKey("BookingWebApplication.Models.Customer", "UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("ContentAdmin");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BookingWebApplication.Models.Admin", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("BookingWebApplication.Models.Cinema", b =>
                {
                    b.Navigation("Provoles");
                });

            modelBuilder.Entity("BookingWebApplication.Models.ContentAdmin", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("Provoles");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("BookingWebApplication.Models.Customer", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("BookingWebApplication.Models.Movie", b =>
                {
                    b.Navigation("Provoles");
                });

            modelBuilder.Entity("BookingWebApplication.Models.Provoli", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
